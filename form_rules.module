<?php
/**
 * @file
 * Provides special token to use with pathauto.
 *
 * @see http://drupal.org/node/1308488
 */
/**
 * Provide information about our custom placeholder/token.
 *
 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see http://api.lullabot.com/token_example_token_info/7
 * @return array
 *   An associative array of available tokens and token types.
 */
function form_rules_token_info() {
	$info['types']['form'] = array(
    'name' => t('Form'),
    'description' => t('Tokens related to webform submissions.'),
    //'needs-data' => 'webform-submission',
    );
	$info['tokens']['form']['contribution_total_amount'] = array(
        'name' => t('Contribution Amount'),
        'description' => t('The final amount of the contribution.'),
    );
    return $info;
}
/**
 * Provide replacement values for placeholder tokens.
 *
 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see http://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param array $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data (optional)
 *   An associative array of data objects to be used when generating replacement
 *   values, as supplied in the $data parameter to token_replace().
 * @param array $options (optional)
 *   An associative array of options for token replacement; see token_replace()
 *   for possible values.
 * @return array
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.
 */
function form_rules_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();

    $sanitize = !empty($options['sanitize']);

    if ($type == 'form' && !empty($_POST['submitted'])) {
        foreach ($tokens as $name => $original) {
        	$form[$name] = $_POST['submitted'][$name];
            $replacements[$original] = $form[$name];
	    }
		$replacements['[form:contribution_total_amount]'] = $_POST['submitted']['price_for_submission']*
		($_POST['submitted']['how_many_brand_entries_would_you_like_to_submit']+$_POST['submitted']['how_many_new_products_would_you_like_to_submit']);
    }
    return $replacements;
}
